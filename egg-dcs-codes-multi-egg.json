{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-07-17T11:56:06-03:00",
    "name": "DCS Codes MultiEgg",
    "author": "ciroandresb@hotmail.com.ar",
    "description": "Simple DCS Codes Multi MC Egg for PaperMC, FoliaMC, PurpurMC and Velocity",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 8": "ghcr.io\/software-noob\/pterodactyl-images:java_8",
        "Java 11": "ghcr.io\/software-noob\/pterodactyl-images:java_11",
        "Java 16": "ghcr.io\/software-noob\/pterodactyl-images:java_16",
        "Java 17": "ghcr.io\/software-noob\/pterodactyl-images:java_17",
        "Java 18": "ghcr.io\/software-noob\/pterodactyl-images:java_18",
        "Java 19": "ghcr.io\/software-noob\/pterodactyl-images:java_19",
        "Java 20": "ghcr.io\/software-noob\/pterodactyl-images:java_20",
        "Java 21": "ghcr.io\/software-noob\/pterodactyl-images:java_21"
    },
    "file_denylist": [],
    "startup": "java -Xms128M -Xmx$(({{SERVER_MEMORY}}*80\/100))M -jar {{SERVER_JARFILE}}",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\n# Configuraci\u00f3n del archivo de configuraci\u00f3n y funciones relacionadas\r\n\r\nCONFIG_FILE=\"\/mnt\/server\/server_config.cfg\"\r\n\r\n# Funci\u00f3n para mostrar la pantalla de inicio\r\nfunction display {\r\n    echo -e \"\\033c\"\r\n    echo \"=========================================================================\"\r\n    echo \"                  DSC Codes Minecraft Server Installer                   \"\r\n    echo \"=========================================================================\"\r\n}\r\n\r\n# Funci\u00f3n para instalar dependencias necesarias (curl y jq)\r\nfunction install_dependencies {\r\n    if ! command -v curl &> \/dev\/null; then\r\n        echo \"curl is not installed. Installing curl...\"\r\n        apk update && apk add curl\r\n    else\r\n        echo \"curl is already installed.\"\r\n    fi\r\n\r\n    if ! command -v jq &> \/dev\/null; then\r\n        echo \"jq is not installed. Installing jq...\"\r\n        apk add jq\r\n    else\r\n        echo \"jq is already installed.\"\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para forzar modificaciones en server.properties solo si es necesario\r\nfunction forceStuffs {\r\n    if ! grep -q \"^motd=$\" \/mnt\/server\/server.properties; then\r\n        echo \"motd=Powered by DCS Codes | Change this motd in server.properties\" >> \/mnt\/server\/server.properties\r\n        echo \"Notice: The server.properties file has been modified. Changes will be applied.\"\r\n        sleep 3\r\n    else\r\n        echo \"motd already set. Skipping modification.\"\r\n        sleep 2\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para crear eula.txt si no existe\r\nfunction createEula {\r\n    echo \"eula=true\" > \/mnt\/server\/eula.txt\r\n}\r\n\r\n# Funci\u00f3n para convertir una marca de tiempo en una fecha legible\r\nfunction convertDate {\r\n    local timestamp=$1\r\n    if [[ \"$timestamp\" =~ ^[0-9]+$ ]]; then\r\n        # Si el timestamp es un n\u00famero, se asume que es epoch time en milisegundos\r\n        date -d @$((timestamp \/ 1000)) +\"%Y-%m-%d %H:%M:%S\"\r\n    else\r\n        # Si el timestamp no es un n\u00famero, se asume que es una fecha ISO 8601\r\n        date -d \"$(echo \"$timestamp\" | sed 's\/\\.[0-9]*Z\/\/')\" +\"%Y-%m-%d %H:%M:%S\"\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para comparar versiones y fechas\r\nfunction compareVersions {\r\n    local new_version=$1\r\n    local new_build=$2\r\n    local new_date=$3\r\n    local earlier_version=$4\r\n    local earlier_build=$5\r\n    local earlier_date=$6\r\n\r\n    if [ \"$new_version\" = \"$earlier_version\" ]; then\r\n        echo \"You are downloading the same version of Minecraft.\"\r\n        sleep 3\r\n        if [ \"$new_build\" = \"$earlier_build\" ]; then\r\n            echo \"You are downloading the same build.\"\r\n            sleep 3\r\n        else\r\n            if [ \"$new_date\" \\> \"$earlier_date\" ]; then\r\n                echo \"You are downloading a newer build of the same version.\"\r\n                sleep 3\r\n            else\r\n                echo \"You are downloading an older build of the same version.\"\r\n                sleep 3\r\n            fi\r\n        fi\r\n    else\r\n        if [ \"$new_date\" \\> \"$earlier_date\" ]; then\r\n            echo \"You are downloading a newer version of Minecraft.\"\r\n            sleep 3\r\n        else\r\n            echo \"You are downloading an older version of Minecraft.\"\r\n            sleep 3\r\n        fi\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para descargar el servidor de Minecraft seg\u00fan la elecci\u00f3n del usuario\r\nfunction downloadServer {\r\n    platform_choice=\"${PLATFORM_CHOICE:-1}\"\r\n    version=\"${VERSION:-latest}\"\r\n    build=\"${BUILD:-latest}\"\r\n\r\n    case $platform_choice in\r\n        1)\r\n            fork_name=\"PaperMC\"\r\n            if [ \"$version\" = \"latest\" ]; then\r\n                version=$(curl -s \"https:\/\/papermc.io\/v2\/projects\/paper\" | jq -r '.versions[-1]')\r\n            fi\r\n            if [ \"$build\" = \"latest\" ]; then\r\n                build=$(curl -s \"https:\/\/papermc.io\/v2\/projects\/paper\/versions\/$version\" | jq -r '.builds[-1]')\r\n            fi\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"\r\n            DOWNLOAD_URL=\"https:\/\/papermc.io\/api\/v2\/projects\/paper\/versions\/$version\/builds\/$build\/downloads\/paper-$version-$build.jar\"\r\n            BUILD_TIMESTAMP=$(curl -s \"https:\/\/papermc.io\/api\/v2\/projects\/paper\/versions\/$version\/builds\/$build\" | jq -r '.time')\r\n            BUILD_DATE=$(convertDate \"$BUILD_TIMESTAMP\")\r\n            ;;\r\n        2)\r\n            fork_name=\"PurpurMC\"\r\n            if [ \"$version\" = \"latest\" ]; then\r\n                version=$(curl -s \"https:\/\/purpurmc.org\/api\/v2\/purpur\" | jq -r '.versions[-1]')\r\n            fi\r\n            if [ \"$build\" = \"latest\" ]; then\r\n                build=\"latest\"\r\n            fi\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"\r\n            DOWNLOAD_URL=\"https:\/\/purpurmc.org\/api\/v2\/purpur\/$version\/$build\/download\"\r\n            BUILD_TIMESTAMP=$(curl -s \"https:\/\/purpurmc.org\/api\/v2\/purpur\/$version\/$build\" | jq -r '.timestamp')\r\n            BUILD_DATE=$(convertDate \"$BUILD_TIMESTAMP\")\r\n            ;;\r\n        3)\r\n            fork_name=\"FoliaMC\"\r\n            if [ \"$version\" = \"latest\" ]; then\r\n                version=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/folia\" | jq -r '.versions[-1]')\r\n            fi\r\n            if [ \"$build\" = \"latest\" ]; then\r\n                build=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/folia\/versions\/$version\" | jq -r '.builds[-1]')\r\n            fi\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"\r\n            DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/folia\/versions\/$version\/builds\/$build\/downloads\/folia-$version-$build.jar\"\r\n            BUILD_TIMESTAMP=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/folia\/versions\/$version\/builds\/$build\" | jq -r '.time')\r\n            BUILD_DATE=$(convertDate \"$BUILD_TIMESTAMP\")\r\n            ;;\r\n        4)\r\n            fork_name=\"PufferfishMC\"\r\n            if [ \"$version\" = \"latest\" ]; then\r\n                version=\"1.20\"  # Versi\u00f3n espec\u00edfica de Pufferfish\r\n            fi\r\n            if [ \"$build\" = \"latest\" ]; then\r\n                build=\"52\"  # Build espec\u00edfica de Pufferfish\r\n            fi\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"\r\n            DOWNLOAD_URL=\"https:\/\/ci.pufferfish.host\/job\/Pufferfish-$version\/$build\/artifact\/build\/libs\/pufferfish-paperclip-$version-R$build-SNAPSHOT-reobf.jar\"\r\n            BUILD_DATE=\"Unknown\" # Pufferfish no proporciona una fecha de compilaci\u00f3n en su URL\r\n            ;;\r\n        *)\r\n            echo \"Invalid option\"\r\n            sleep 3\r\n            exit 1\r\n            ;;\r\n    esac\r\n\r\n    display\r\n    echo \"Selected platform: $fork_name\"\r\n    echo \"Version: $version\"\r\n    echo \"Build: $build\"\r\n    echo \"Build Date: $BUILD_DATE\"\r\n    sleep 3\r\n\r\n    if [ -f \"$SERVER_FILE\" ]; then\r\n        display\r\n        echo \"File $SERVER_FILE already exists. Overwriting...\"\r\n        sleep 3\r\n    fi\r\n\r\n    if [ -f \"$CONFIG_FILE\" ]; then\r\n        EARLIER_VERSION=$(grep \"version:\" \"$CONFIG_FILE\" | cut -d' ' -f2)\r\n        EARLIER_BUILD=$(grep \"build:\" \"$CONFIG_FILE\" | cut -d' ' -f2)\r\n        EARLIER_DATE=$(grep \"date:\" \"$CONFIG_FILE\" | cut -d' ' -f2)\r\n        compareVersions \"$version\" \"$build\" \"$BUILD_DATE\" \"$EARLIER_VERSION\" \"$EARLIER_BUILD\" \"$EARLIER_DATE\"\r\n    fi\r\n\r\n    display\r\n    echo \"Download in progress, please wait...\"\r\n    sleep 2\r\n    forceStuffs\r\n\r\n    # Descargar el archivo y guardarlo con el nombre correcto\r\n    curl -L \"$DOWNLOAD_URL\" -o \/mnt\/server\/download_temp.jar\r\n    if [ $? -ne 0 ]; then\r\n        echo \"Download failed. Please check the URL and your internet connection.\"\r\n        sleep 3\r\n        exit 1\r\n    fi\r\n\r\n    # Renombrar el archivo descargado a server.jar\r\n    mv \/mnt\/server\/download_temp.jar \"$SERVER_FILE\"\r\n\r\n    # Verificar el nombre del archivo descargado\r\n    if [ ! -f \"$SERVER_FILE\" ]; then\r\n        echo \"Error: The downloaded file does not match the expected name $SERVER_FILE.\"\r\n        ls -l \/mnt\/server\/\r\n        sleep 3\r\n        exit 1\r\n    fi\r\n\r\n    # Guardar el nombre del archivo en el archivo de configuraci\u00f3n\r\n    echo \"file: $SERVER_FILE\" > \"$CONFIG_FILE\"\r\n    echo \"version: $version\" >> \"$CONFIG_FILE\"\r\n    echo \"build: $build\" >> \"$CONFIG_FILE\"\r\n    echo \"date: $BUILD_DATE\" >> \"$CONFIG_FILE\"\r\n\r\n    display\r\n    echo \"Download complete\"\r\n    sleep 3\r\n    echo -e \"\"\r\n}\r\n\r\n# Iniciar la instalaci\u00f3n de dependencias y descargar el servidor si es necesario\r\ninstall_dependencies\r\n\r\nif [ ! -f \"\/mnt\/server\/eula.txt\" ]; then\r\n    display\r\n    createEula\r\n    downloadServer\r\nelse\r\n    display\r\n    echo \"eula.txt found. Skipping download.\"\r\n    sleep 2\r\n    downloadServer\r\nfi\r\n\r\n# Salir con un c\u00f3digo de \u00e9xito\r\nexit 0",
            "container": "alpine:3.14",
            "entrypoint": "ash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "The version of Minecraft to download. \r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the .jar file to run the server with.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/|max:80",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "The build number for the release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Platform Choice",
            "description": "1=PaperMC, 2=PurpurMC, 3=Velocity, 4=FoliaMC",
            "env_variable": "PLATFORM_CHOICE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:4",
            "field_type": "text"
        }
    ]
}