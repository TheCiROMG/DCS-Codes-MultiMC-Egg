{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2024-09-05T16:19:55-03:00",
    "name": "DCS Codes MultiEgg",
    "author": "ciroandresb@hotmail.com.ar",
    "description": "Simple DCS Codes Multi MC Egg for PaperMC, FoliaMC, PurpurMC and Velocity",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 8": "ghcr.io\/parkervcp\/yolks:java_8",
        "Java 11": "ghcr.io\/parkervcp\/yolks:java_11",
        "Java 16": "ghcr.io\/parkervcp\/yolks:java_16",
        "Java 17": "ghcr.io\/parkervcp\/yolks:java_17",
        "Java 19": "ghcr.io\/parkervcp\/yolks:java_19",
        "Java 21": "ghcr.io\/parkervcp\/yolks:java_21"
    },
    "file_denylist": [],
    "startup": "java -Xms128M -Xmx$(({{SERVER_MEMORY}}*80\/100))M --add-modules=jdk.incubator.vector -jar {{SERVER_JARFILE}}",
    "config": {
        "files": "{\r\n    \"server.properties\": {\r\n        \"parser\": \"properties\",\r\n        \"find\": {\r\n            \"server-ip\": \"0.0.0.0\",\r\n            \"server-port\": \"{{server.build.default.port}}\"\r\n        }\r\n    }\r\n}",
        "startup": "{\r\n    \"done\": \")! For help, type \"\r\n}",
        "logs": "{}",
        "stop": "stop"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n\r\nCONFIG_FILE=\"\/mnt\/server\/server_config.cfg\"  # Definir la ruta del archivo de configuraci\u00f3n\r\n\r\n# Funci\u00f3n para mostrar el banner\r\nfunction display {\r\n    echo -e \"\\033c\"  # Limpiar la pantalla\r\n    echo \"=========================================================================\"\r\n    echo \"                  DSC Codes Minecraft Server Installer                   \"\r\n    echo \"=========================================================================\"\r\n}\r\n\r\n# Funci\u00f3n para instalar dependencias\r\nfunction install_dependencies {\r\n    if ! command -v curl &> \/dev\/null; then  # Verificar si curl no est\u00e1 instalado\r\n        echo \"curl no est\u00e1 instalado. Instalando curl...\"\r\n        apt update && apt install -y curl || exit 0  # Instalar curl usando apt\r\n    else\r\n        echo \"curl ya est\u00e1 instalado.\"\r\n    fi\r\n\r\n    if ! command -v jq &> \/dev\/null; then  # Verificar si jq no est\u00e1 instalado\r\n        echo \"jq no est\u00e1 instalado. Instalando jq...\"\r\n        apt install -y jq || exit 0  # Instalar jq usando apt\r\n    else\r\n        echo \"jq ya est\u00e1 instalado.\"\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para forzar configuraciones en server.properties\r\nfunction forceStuffs {\r\n    if ! grep -q \"^motd=\" \/mnt\/server\/server.properties; then  # Verificar si no existe \"motd=\" en server.properties\r\n        echo \"motd=Powered by DCS Codes | Change this motd in server.properties\" >> \/mnt\/server\/server.properties  # A\u00f1adir motd\r\n        echo \"Aviso: El archivo server.properties ha sido modificado. Los cambios se aplicar\u00e1n.\"\r\n        sleep 3\r\n    else\r\n        echo \"motd ya est\u00e1 configurado. Omitiendo modificaci\u00f3n.\"\r\n        sleep 2\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para crear el archivo eula.txt\r\nfunction createEula {\r\n    echo \"eula=true\" > \/mnt\/server\/eula.txt  # Crear eula.txt con el contenido \"eula=true\"\r\n}\r\n\r\n# Funci\u00f3n para convertir la marca de tiempo a una fecha legible\r\nfunction convertDate {\r\n    local timestamp=$1\r\n    local format=$2\r\n    if [ \"$format\" == \"epoch\" ]; then\r\n        # Si el timestamp es un n\u00famero, se asume que es epoch time en milisegundos\r\n        date -d @$((timestamp \/ 1000)) +\"%Y-%m-%d %H:%M:%S\"\r\n    else\r\n        # Si el timestamp no es un n\u00famero, se asume que es una fecha ISO 8601\/RFC 3339\r\n        date -d \"$(echo \"$timestamp\" | sed 's\/\\.[0-9]*Z\/\/')\" +\"%Y-%m-%d %H:%M:%S\"\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para comparar versiones y fechas\r\nfunction compareVersions {\r\n    local new_version=$1\r\n    local new_build=$2\r\n    local new_date=$3\r\n    local earlier_version=$4\r\n    local earlier_build=$5\r\n    local earlier_date=$6\r\n\r\n    if [ \"$new_version\" = \"$earlier_version\" ]; then\r\n        echo \"Est\u00e1s descargando la misma versi\u00f3n de Minecraft.\"\r\n        sleep 3\r\n        if [ \"$new_build\" = \"$earlier_build\" ]; then\r\n            echo \"Est\u00e1s descargando el mismo build.\"\r\n            sleep 3\r\n        else\r\n            if [ \"$new_date\" \\> \"$earlier_date\" ]; then\r\n                echo \"Est\u00e1s descargando un build m\u00e1s nuevo de la misma versi\u00f3n.\"\r\n                sleep 3\r\n            else\r\n                echo \"Est\u00e1s descargando un build m\u00e1s antiguo de la misma versi\u00f3n.\"\r\n                sleep 3\r\n            fi\r\n        fi\r\n    else\r\n        if [ \"$new_date\" \\> \"$earlier_date\" ]; then\r\n            echo \"Est\u00e1s descargando una versi\u00f3n m\u00e1s nueva de Minecraft.\"\r\n            sleep 3\r\n        else\r\n            echo \"Est\u00e1s descargando una versi\u00f3n m\u00e1s antigua de Minecraft.\"\r\n            sleep 3\r\n        fi\r\n    fi\r\n}\r\n\r\n# Funci\u00f3n para descargar el servidor\r\nfunction downloadServer {\r\n    platform_choice=\"${PLATFORM_CHOICE:-1}\"  # Elegir la plataforma (1: PaperMC, 2: PurpurMC, 3: FoliaMC)\r\n    version=\"${VERSION:-latest}\"  # Elegir la versi\u00f3n (por defecto es \"latest\")\r\n\r\n    case $platform_choice in\r\n        PaperMC)\r\n            fork_name=\"PaperMC\"\r\n            if [ \"$version\" = \"latest\" ];then\r\n                version=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/paper\" | jq -r '.versions[-1]')  # Obtener la \u00faltima versi\u00f3n\r\n            fi\r\n            BUILD=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/paper\/versions\/$version\" | jq -r '.builds[-1]')  # Obtener el \u00faltimo build\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"  # Definir el archivo del servidor\r\n            DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/paper\/versions\/$version\/builds\/$BUILD\/downloads\/paper-$version-$BUILD.jar\"  # Definir la URL de descarga\r\n            BUILD_TIMESTAMP=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/paper\/versions\/$version\/builds\/$BUILD\" | jq -r '.time')  # Obtener la marca de tiempo del build\r\n            BUILD_DATE=$(convertDate \"$BUILD_TIMESTAMP\" \"rfc3339\")  # Convertir la marca de tiempo a una fecha legible\r\n            ;;\r\n        PurpurMC)\r\n            fork_name=\"PurpurMC\"\r\n            if [ \"$version\" = \"latest\" ];then\r\n                version=$(curl -s \"https:\/\/api.purpurmc.org\/v2\/purpur\" | jq -r '.versions[-1]')  # Obtener la \u00faltima versi\u00f3n\r\n            fi\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"  # Definir el archivo del servidor\r\n            BUILD=$(curl -s \"https:\/\/api.purpurmc.org\/v2\/purpur\/$version\/latest\" | jq -r '.build')  # Obtener el \u00faltimo build\r\n            DOWNLOAD_URL=\"https:\/\/api.purpurmc.org\/v2\/purpur\/$version\/latest\/download\"  # Definir la URL de descarga\r\n            BUILD_TIMESTAMP=$(curl -s \"https:\/\/api.purpurmc.org\/v2\/purpur\/$version\/latest\" | jq -r '.timestamp')  # Obtener la marca de tiempo del build\r\n            BUILD_DATE=$(convertDate \"$BUILD_TIMESTAMP\" \"epoch\")  # Convertir la marca de tiempo a una fecha legible\r\n            ;;\r\n        FoliaMC)\r\n            fork_name=\"FoliaMC\"\r\n            if [ \"$version\" = \"latest\" ];then\r\n                version=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/folia\" | jq -r '.versions[-1]')  # Obtener la \u00faltima versi\u00f3n\r\n            fi\r\n            BUILD=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/folia\/versions\/$version\" | jq -r '.builds[-1]')  # Obtener el \u00faltimo build\r\n            SERVER_FILE=\"\/mnt\/server\/server.jar\"  # Definir el archivo del servidor\r\n            DOWNLOAD_URL=\"https:\/\/api.papermc.io\/v2\/projects\/folia\/versions\/$version\/builds\/$BUILD\/downloads\/folia-$version-$BUILD.jar\"  # Definir la URL de descarga\r\n            BUILD_TIMESTAMP=$(curl -s \"https:\/\/api.papermc.io\/v2\/projects\/folia\/versions\/$version\/builds\/$BUILD\" | jq -r '.time')  # Obtener la marca de tiempo del build\r\n            BUILD_DATE=$(convertDate \"$BUILD_TIMESTAMP\" \"rfc3339\")  # Convertir la marca de tiempo a una fecha legible\r\n            ;;\r\n        *)\r\n            echo \"Opci\u00f3n inv\u00e1lida\"\r\n            sleep 3\r\n            exit 1\r\n            ;;\r\n    esac\r\n\r\n    display\r\n    echo \"Plataforma seleccionada: $fork_name\"\r\n    echo \"Versi\u00f3n: $version\"\r\n    echo \"Build: $BUILD\"\r\n    echo \"Fecha del build: $BUILD_DATE\"\r\n    sleep 3\r\n\r\n    if [ -f \"$SERVER_FILE\" ]; then\r\n        display\r\n        echo \"El archivo $SERVER_FILE ya existe. Renombr\u00e1ndolo a oldserver.jar...\"\r\n        mv \"$SERVER_FILE\" \"\/mnt\/server\/oldserver.jar\"  # Renombrar el archivo existente a oldserver.jar\r\n        sleep 3\r\n    fi\r\n\r\n    if [ -f \"$CONFIG_FILE\" ]; then\r\n        # Guardar datos de la versi\u00f3n anterior\r\n        echo \"--- Detalles de la versi\u00f3n anterior el $(date +'%Y-%m-%d %H:%M:%S') ---\" >> \"$CONFIG_FILE\"\r\n        grep -E \"fork:|version:|build:|date:\" \"$CONFIG_FILE\" >> \"$CONFIG_FILE\"  # Agregar los detalles de la versi\u00f3n anterior al archivo de configuraci\u00f3n\r\n    fi\r\n\r\n    display\r\n    echo \"Descarga en progreso, por favor espera...\"\r\n    sleep 2\r\n    forceStuffs\r\n\r\n    # Descargar el archivo y guardarlo con el nombre correcto\r\n    curl -L \"$DOWNLOAD_URL\" -o \/mnt\/server\/download_temp.jar || exit 0\r\n\r\n    # Renombrar el archivo descargado a server.jar\r\n    mv \/mnt\/server\/download_temp.jar \"$SERVER_FILE\"\r\n\r\n    # Verificar el nombre del archivo descargado\r\n    if [ ! -f \"$SERVER_FILE\" ]; then\r\n        echo \"Error: El archivo descargado no coincide con el nombre esperado $SERVER_FILE.\"\r\n        ls -l \/mnt\/server\r\n        exit 1\r\n    fi\r\n\r\n    # Guardar datos de la nueva versi\u00f3n\r\n    echo \"+++ Detalles de la nueva versi\u00f3n descargada el $(date +'%Y-%m-%d %H:%M:%S') +++\" >> \"$CONFIG_FILE\"\r\n    echo \"fork: $fork_name\" >> \"$CONFIG_FILE\"\r\n    echo \"version: $version\" >> \"$CONFIG_FILE\"\r\n    echo \"build: $BUILD\" >> \"$CONFIG_FILE\"\r\n    echo \"date: $BUILD_DATE\" >> \"$CONFIG_FILE\"\r\n\r\n    display\r\n    echo \"Descarga completa\"\r\n    sleep 3\r\n    echo -e \"\"\r\n}\r\n\r\ninstall_dependencies\r\n\r\nif [ ! -f \"\/mnt\/server\/eula.txt\" ]; then\r\n    display\r\n    createEula\r\n    downloadServer\r\nelse\r\n    display\r\n    echo \"eula.txt encontrado. Omitiendo descarga.\"\r\n    sleep 2\r\n    downloadServer\r\nfi\r\n\r\n# Salir con un c\u00f3digo de \u00e9xito\r\nexit 0",
            "container": "ghcr.io\/parkervcp\/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Minecraft Version",
            "description": "The version of Minecraft to download. \r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Server Jar File",
            "description": "The name of the .jar file to run the server with.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/|max:80",
            "field_type": "text"
        },
        {
            "name": "Build Number",
            "description": "The build number for the release.\r\n\r\nLeave at latest to always get the latest version. Invalid versions will default to latest.",
            "env_variable": "BUILD",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20",
            "field_type": "text"
        },
        {
            "name": "Platform Choice",
            "description": "Install : PaperMC, PurpurMC, FoliaMC",
            "env_variable": "PLATFORM_CHOICE",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|max:999|in:PaperMC,PurpurMC,FoliaMC",
            "field_type": "text"
        }
    ]
}